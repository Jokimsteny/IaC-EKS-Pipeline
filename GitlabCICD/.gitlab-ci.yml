stages:
  - init
  - validate
  - plan
  - test
  - apply
  - tag

variables:
  TF_VERSION: "1.3.5"
  AWS_REGION: "us-east-1"
  TF_STATE_BUCKET: "your-tfstate-bucket-name" # Replace
  DYNAMODB_TABLE: "terraform-locks"            # Replace

before_script:
  - apk add --no-cache bash curl jq git
  - curl -fsSL https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -o terraform.zip
  - unzip terraform.zip
  - mv terraform /usr/local/bin/
  - terraform --version
  - apk add --no-cache py3-pip
  - pip3 install awscli
  - aws --version
  - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=eks/${CI_ENVIRONMENT_NAME}/terraform.tfstate" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${DYNAMODB_TABLE}"

init:
  stage: init
  script:
    - terraform init -reconfigure

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -no-color -out=tfplan -var="environment=${CI_ENVIRONMENT_NAME}" -var="region=${AWS_REGION}" | tee tfplan_output.txt
    - |
      if grep -qE "^-/(replace)|will be destroyed|-/+" tfplan_output.txt; then
        echo "‚ùå Breaking change detected in Terraform plan!"
        exit 1
      fi
  artifacts:
    paths:
      - tfplan

test:
  stage: test
  script:
    - terraform apply -target=null_resource.test_cluster -auto-approve || true

apply:
  stage: apply
  when: manual
  script:
    - terraform apply -auto-approve tfplan

tag:
  stage: tag
  script:
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "CI Bot"
    - git tag "eks/${CI_ENVIRONMENT_NAME}/v${CI_PIPELINE_IID}"
    - git push origin --tags
  only:
    - main
