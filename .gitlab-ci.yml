stages:
  - format
  - init
  - validate
  - plan
  - test
  - apply
  - tag

variables:
  TF_VERSION: "1.3.5"
  AWS_REGION: "us-east-1"
  TF_STATE_BUCKET: "your-tfstate-bucket-name"
  DYNAMODB_TABLE: "terraform-locks"

# Common setup before any job
before_script:
  - apk add --no-cache bash curl jq git unzip
  - curl -fsSL https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -o terraform.zip
  - unzip terraform.zip
  - mv terraform /usr/local/bin/
  - terraform --version
  - apk add --no-cache py3-pip
  - pip3 install awscli
  - aws --version

# üîç Linting & Formatting Stage
format_lint:
  stage: format
  image: hashicorp/terraform:${TF_VERSION}
  script:
    - echo "Checking terraform formatting..."
    - terraform fmt -recursive -check -diff
    - echo "Installing TFLint..."
    - apk add --no-cache curl unzip
    - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
    - echo "Initializing TFLint..."
    - tflint --init
    - echo "Running TFLint..."
    - tflint --recursive

init:
  stage: init
  script:
    - terraform init -reconfigure

validate:
  stage: validate
  script:
    - terraform validate

terraform_compliance:
  stage: validate
  image: eerkunt/terraform-compliance
  script:
    - terraform show -json tfplan > tfplan.json
    - terraform-compliance -p tfplan.json -f tests/

infracost:
  stage: validate
  image: infracost/infracost:ci-0.10
  script:
    - infracost breakdown --path . --format json --out-file infracost.json
    - infracost diff --path infracost.json --threshold-percent 30

plan:
  stage: plan
  script:
    - terraform init -backend-config=backend.tfvars
    - terraform plan -no-color -out=tfplan | tee tfplan_output.txt
    - |
      if grep -qE "^-/(replace)|will be destroyed|-/+" tfplan_output.txt; then
        echo "‚ùå Breaking change detected in Terraform plan!"
        exit 1
      fi
  artifacts:
    paths:
      - tfplan

test:
  stage: test
  script:
    - terraform apply -target=null_resource.test_cluster -auto-approve || true

apply:
  stage: apply
  when: manual
  script:
    - terraform apply -auto-approve tfplan

tag:
  stage: tag
  script:
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "CI Bot"
    - git tag "eks/${CI_ENVIRONMENT_NAME}/v${CI_PIPELINE_IID}"
    - git push origin --tags
  only:
    - main
